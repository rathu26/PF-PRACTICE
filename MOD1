#PF-Prac-1
def add_string(str1):
  length= len(str1)
  if(length>2):
      if(str1[-3:]=='ing'):
          str1+='ly'
      else:
          str1+='ing'
  return str1
print(add_string('sleep'))
print(add_string('amazing'))
print(add_string('is'))


#PF-Prac-2
def bracket_pattern(input_str):
    length=len(input_str)
    if(length%2!=0):
        return False
    elif(input_str[0]==')'or input_str[-1:]=='('):
        return False
    else:
        return True 
print(bracket_pattern(')()((()()))'))
print(bracket_pattern('()((())())'))


#PF-Prac-3
def create_new_dictionary(prices):
    new_dict={}
    for key in prices:
        if(prices[key]>200):
            new_dict.__setitem__(key, prices[key])    
    return new_dict
prices = { 'ACME': 45.23,'AAPL': 612.78,'IBM': 205.55,'HPQ': 37.20,'FB': 10.75}
print(create_new_dictionary(prices))


#PF-Prac-4
def find_nine(nums):
    for i in range(0,len(nums)):
        if(nums[i]==9 and i<4):
            return True
    return False
nums=[1,9,4,5,6]
print(find_nine(nums))


#PF-Prac-5
def count_digits_letters(sentence):
    result_list=[]
    count1=0 
    count2=0 
    for i in sentence:
        if(i.isdigit()):
            count1=count1+1
        elif(i.isalpha()):
            count2=count2+1
    result_list.append(count2)
    result_list.append(count1)
    return result_list
sentence="Infosys 123"
print(count_digits_letters(sentence)


#PF-Prac-6
def list123(nums):
    for i in range(0,len(nums)-1):
        if nums[i]==1 and nums[i+1]==2 and nums[i+2]==3:
            return True
        return False      
nums=[1,2,3,4,5]
print(list123(nums))


#PF-Prac-7
def seed_no(number,ref_no):
    temp=number
    ref=ref_no
    while number>0:
        rem=number%10
        mul=mul*rem
        number=number//10
    if((mul*temp)==ref):
        return True
    return False
number=123
ref_no=738
print(seed_no(number,ref_no))


#PF-Prac-8
def calculate_net_amount(trans_list):
    net_amount=0
    for i in trans_list:
        a=[]
        a=i.split(":")
        if(a[0]=='D'):
            net_amount+=int(a[1])
        else:
            net_amount-=int(a[1])
    
    return net_amount

trans_list=["D:300","D:200","W:200","D:100"]
print(calculate_net_amount(trans_list))



#PF-Prac-9
def generate_dict(number):
    new_dict={}
    for i in range(1,number+1):
        new_dict[i]=i**2
    return new_dict
number=20
print(generate_dict(number))


#PF-Prac-10
def string_both_ends(input_string):
	length=len(input_string)
	if(length<2):
	    return -1 
	else:
	    new=""
	    new=input_string[0:2]+input_string[-2:]
	    return new
input_string="w3"
print(string_both_ends(input_string))

